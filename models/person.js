const { add } = require('lodash');
const mongoose = require('mongoose');
const bcrypt = require('bcrypt');
//define the schema for the person collection
const personSchema = new mongoose.Schema({
    name:{
        type: String,
        requierd: true
    },
    age:{
        type: Number
    },
    work:{
        type: String,
        enum : ['chef','waiter','manager'],
        requierd: true
    },
    mobile:{
        type: Number,
        requierd: true
    },
    email:{
        type: String,
        requierd: true,
        unique: true
    },
    
    address:{
        type: String,
        requierd: true
    },
    salary:{
        type: Number,
        requierd: true
    },
   username:{
       type: String,
       requierd: true,
       unique: true
   },
   password:{
       type: String,
       requierd: true
   }     

})
//hash the password before saving
personSchema.pre('save', async function(next){
    const person = this;
    if(!person.isModified('password')) return next();
    //check if the password is modified
    try {
        //hash password generated by the user

        const salt = await bcrypt.genSalt(10);
        const hash = await bcrypt.hash(person.password, salt);
        person.password = hash;
        



    } catch (error) {
        return next(error);
    }
})

//compare the password
personSchema.methods.comparePassword = async function(password){
    try {
        const isMatch = await bcrypt.compare(password, this.password);
        return isMatch;
        
    } catch (error) {
        return false;
    }
}





//export the schema
const person = mongoose.model('person', personSchema);
module.exports = person;